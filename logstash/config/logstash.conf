input {
  kafka {
    bootstrap_servers => "kafka:9093"
    topics => ["your_topic_name"]
    codec => "json"  # Ensure it parses the incoming message as JSON
  }
}

filter {
  # Add a new field for the sourcetype
  mutate {
    add_field => { "sourcetype" => "kafka-producer" }
  }

  # Create the desired event structure
  ruby {
    code => '
      key_value = event.get("number")
      event.set("event", {"response" => key_value})
    '
  }

  # Optionally remove unwanted fields
  mutate {
    remove_field => ["@timestamp", "number", "@version"]  # Adjust based on what you want to keep
  }
}

output {
  stdout { codec => rubydebug }  # For debugging, see the output in the console

  http {
    http_method => "post"
    url => "http://splunk:8088/services/collector/event"
    headers => {
      "Authorization" => "Splunk ae99dce1-d716-4fee-a28d-4ba8b9270b93"
    }
    format => "json"
    message => '{"sourcetype": "%{[sourcetype]}", "event": %{[event]}}'  # Constructed message
  }
}



# input {
#   kafka {
#     bootstrap_servers => "kafka:9093"
#     topics => ["your_topic_name"]
#   }
# }

# output {
#   stdout { codec => rubydebug }
#   http {
#     http_method => "post"
#     url => "http://splunk:8088/services/collector/event"
#     headers => {
#       "Authorization" => "Splunk ae99dce1-d716-4fee-a28d-4ba8b9270b93"
#     }
#     format => "json"
#     message => '{"event": "test event"}'
#   }
# }
